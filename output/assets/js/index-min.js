class Task{constructor(t){this.content=t,this.isCompleted=!1}}class ToDoList{constructor(t){this.tasksContainer=t,this.tasks=JSON.parse(localStorage.getItem("tasks"))||[],this._activeTasks=[],this._completedTasks=[],this.bindAddTaskButton(),this.createTasksFilters(),this.createTasksList(this.tasks)}get activeTasks(){return this._activeTasks=this.tasks.filter(t=>!1===t.isCompleted),this._activeTasks}get completedTasks(){return this._completedTasks=this.tasks.filter(t=>!0===t.isCompleted),this._completedTasks}bindAddTaskButton(){const t=document.getElementById("todo-button-add"),e=document.getElementById("todo-input");e.addEventListener("keyup",t=>{"Enter"===t.key&&(this.saveTask(e.value),e.value="")}),t.addEventListener("click",()=>{this.saveTask(e.value),e.value=""})}saveTask(t){if(""!==t){const e=new Task(t);return this.tasks.unshift(e),this.addToLocalStorage(),void this.createTasksList(this.tasks)}alert("Type something!")}createTasksList(t){this.createActiveTaskCounter(),this.tasksContainer.innerHTML="",t.forEach((t,e)=>{const s=document.createElement("li"),a=document.createElement("span"),o=document.createElement("div"),i=document.createElement("button"),n=document.createElement("button");s.classList.add("todo-item"),a.classList.add("todo-item-content"),o.classList.add("todo-item-actions"),a.innerHTML=t.content,i.setAttribute("class","todo-task-button todo-done-button"),i.innerHTML="Done",i.addEventListener("click",e=>{e.currentTarget.parentNode.parentNode.classList.add("todo-item-completed"),o.removeChild(i),t.isCompleted=!0,this.addToLocalStorage(),this.createTasksList(this.tasks)}),n.setAttribute("class","todo-task-button todo-remove-button"),n.innerHTML="Delete",n.addEventListener("click",()=>{this.tasksContainer.removeChild(s),this.tasks.splice(e,1),this.addToLocalStorage(),this.createTasksList(this.tasks)}),t.isCompleted&&(s.classList.add("todo-item-completed"),o.append(n)),t.isCompleted||o.append(i,n),s.append(a,o),this.tasksContainer.append(s)})}createTasksFilters(){const t=document.getElementById("todo-show-all"),e=document.getElementById("todo-show-active"),s=document.getElementById("todo-show-completed"),a=document.getElementById("todo-clear-completed");t.addEventListener("click",t=>{t.preventDefault(),this.createTasksList(this.tasks)}),e.addEventListener("click",t=>{t.preventDefault(),this.createTasksList(this.activeTasks)}),s.addEventListener("click",t=>{t.preventDefault(),this.createTasksList(this.completedTasks)}),a.addEventListener("click",t=>{if(t.preventDefault(),this.completedTasks.length)return this.completedTasks.forEach(t=>{this.tasks.splice(this.tasks.findIndex(e=>e.content===t.content),1)}),this.addToLocalStorage(),void this.createTasksList(this.tasks);alert("All tasks have active status!")})}addToLocalStorage(){localStorage.setItem("tasks",JSON.stringify(this.tasks))}createActiveTaskCounter(){const t=document.getElementById("todo-counter-content");let e=this.activeTasks.length;switch(e){case 0:t.innerHTML="All tasks completed!";break;case 1:t.innerHTML=`${e} task left`;break;default:t.innerHTML=`${e} tasks left`}}}const toDoContainer=document.getElementById("todo-items"),toDoList=new ToDoList(toDoContainer);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
