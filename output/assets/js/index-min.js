class Subject{constructor(){this.tasks=[],this.observers=[]}isSubscribed(s){return this.observers.filter(t=>t===s).length}subscribe(s){this.isSubscribed(s)||this.observers.push(s)}unsubscribe(s){this.observers=this.observers.filter(t=>t!==s)}notify(s){console.log("notified"),this.observers.forEach(t=>t(s))}addTask(s){this.tasks.push(s),this.notify(this.tasks)}removeTask(s){this.tasks=this.tasks.filter(t=>t.id!==s),this.notify(this.tasks)}getTasks(){return this.tasks}}class Task{constructor(s){this.id=(new Date).getTime(),this.content=s,this.completed=!1}}class TaskInput{constructor(s){this.subject=s,this._bindEvents()}_bindEvents(){const s=document.getElementById("todo-button-add"),t=document.getElementById("todo-input");s.addEventListener("click",()=>{if(t.value){const s=new Task(t.value);return this.subject.addTask(s),console.log("Added task!",this.subject),void(t.value="")}alert("Type something!")})}}class TasksList{constructor(s){this.subject=s}renderTasks(){const s=document.getElementById("todo-items");s.innerHTML="",this.subject.getTasks().forEach(t=>{console.log(t);const e=document.createElement("li"),n=document.createElement("span");n.innerText=t.content,e.append(n),s.append(e)})}}function dupa(){console.log("pizda")}!function(){const s=new Subject;new TasksList(s);new TaskInput(s),s.subscribe(dupa())}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
