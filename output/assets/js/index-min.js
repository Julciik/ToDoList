class Task{constructor(t){this.content=t,this.isCompleted=!1}}class ToDoList{constructor(){this.tasks=JSON.parse(localStorage.getItem("tasks"))||[],this.activeTasks=[],this.completedTasks=[],this.tasksContainer=document.getElementById("todo-items"),this.doneTaskClass="todo-item-completed",this.init()}addTask(){const t=document.getElementById("todo-button-add"),e=document.getElementById("todo-input");t.addEventListener("click",()=>{this.saveTask(e.value),e.value=""})}saveTask(t){if(""!==t){const e=new Task(t);return this.tasks.unshift(e),this.addToLocalStorage(),void this.renderTasks(this.tasks)}alert("Type something!")}createTasksList(t){this.tasksContainer.innerHTML="",t.forEach((t,e)=>{const s=document.createElement("li"),a=document.createElement("span"),o=document.createElement("div"),i=document.createElement("button"),n=document.createElement("button");s.classList.add("todo-item"),a.classList.add("todo-item-content"),o.classList.add("todo-item-actions"),a.innerHTML=t.content,i.setAttribute("class","todo-task-button todo-done-button"),i.innerHTML="Done",i.addEventListener("click",e=>{e.currentTarget.parentNode.parentNode.classList.add(this.doneTaskClass),o.removeChild(i),t.isCompleted=!0,this.addToLocalStorage(),this.renderTasks(this.tasks)}),n.setAttribute("class","todo-task-button todo-remove-button"),n.innerHTML="Delete",n.addEventListener("click",()=>{this.tasksContainer.removeChild(s),this.tasks.splice(e,1),this.addToLocalStorage(),this.renderTasks(this.tasks)}),t.isCompleted&&(s.classList.add(this.doneTaskClass),o.append(n)),t.isCompleted||o.append(i,n),s.append(a,o),this.tasksContainer.append(s)})}tasksFilters(){const t=document.getElementById("todo-show-all"),e=document.getElementById("todo-show-active"),s=document.getElementById("todo-show-completed"),a=document.getElementById("todo-clear-completed");t.addEventListener("click",t=>{t.preventDefault(),this.renderTasks(this.tasks)}),e.addEventListener("click",t=>{t.preventDefault(),this.activeTasks=this.tasks.filter(t=>!1===t.isCompleted),this.renderTasks(activeTasks)}),s.addEventListener("click",t=>{t.preventDefault(),this.completedTasks=this.tasks.filter(t=>!0===t.isCompleted),this.renderTasks(this.completedTasks)}),a.addEventListener("click",t=>{t.preventDefault();const e=this.tasks.filter(t=>!0===t.isCompleted);this.tasksContainer.querySelector(`.${this.doneTaskClass}`);e.forEach(t=>{this.tasks.splice(this.tasks.findIndex(e=>e.content===t.content),1)}),this.addToLocalStorage(),this.renderTasks(this.tasks)})}addToLocalStorage(){localStorage.setItem("tasks",JSON.stringify(this.tasks))}renderTasks(t){this.tasksFilters(),this.createTasksList(t)}init(){this.addTask(),this.renderTasks(this.tasks)}}const toDoList=new ToDoList;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
